/* SkeletonAvatar.svelte generated by Svelte v3.29.4 */
import {
	SvelteComponent,
	append,
	assign,
	attr,
	create_slot,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	safe_not_equal,
	set_attributes,
	space,
	svg_element,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import multiplySvgPoints from "./multiply-svg-points";

function create_if_block(ctx) {
	let path;
	let path_style_value;
	let path_d_value;

	return {
		c() {
			path = svg_element("path");
			attr(path, "style", path_style_value = /*color*/ ctx[1] ? `fill: ${/*iconColor*/ ctx[2]}` : "");
			attr(path, "d", path_d_value = /*multiplyPoints*/ ctx[7]("M28.22461,27.1590817 C34.9209931,27.1590817 40.6829044,21.1791004 40.6829044,13.3926332 C40.6829044,5.69958662 34.8898972,0 28.22461,0 C21.5594557,0 15.7663156,5.82423601 15.7663156,13.4549579 C15.7663156,21.1791004 21.5594557,27.1590817 28.22461,27.1590817 Z M8.66515427,56 L47.7841986,56 C52.6739629,56 54.4181241,54.5984253 54.4181241,51.8576005 C54.4181241,43.8219674 44.358068,32.7341519 28.22461,32.7341519 C12.0600561,32.7341519 2,43.8219674 2,51.8576005 C2,54.5984253 3.74402832,56 8.66515427,56 Z"));
		},
		m(target, anchor) {
			insert(target, path, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*color, iconColor*/ 6 && path_style_value !== (path_style_value = /*color*/ ctx[1] ? `fill: ${/*iconColor*/ ctx[2]}` : "")) {
				attr(path, "style", path_style_value);
			}
		},
		d(detaching) {
			if (detaching) detach(path);
		}
	};
}

function create_fragment(ctx) {
	let span;
	let svg;
	let rect;
	let rect_style_value;
	let svg_viewBox_value;
	let t;
	let current;
	let if_block = /*showIcon*/ ctx[3] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
	let span_levels = [/*rest*/ ctx[5], { class: /*skeletonClassName*/ ctx[6] }];
	let span_data = {};

	for (let i = 0; i < span_levels.length; i += 1) {
		span_data = assign(span_data, span_levels[i]);
	}

	return {
		c() {
			span = element("span");
			svg = svg_element("svg");
			rect = svg_element("rect");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			attr(rect, "width", /*size*/ ctx[0]);
			attr(rect, "height", /*size*/ ctx[0]);
			attr(rect, "fillrule", "evenodd");
			attr(rect, "style", rect_style_value = /*color*/ ctx[1] ? `fill: ${/*color*/ ctx[1]}` : "");
			attr(rect, "rx", /*borderRadius*/ ctx[4]);
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", /*size*/ ctx[0]);
			attr(svg, "height", /*size*/ ctx[0]);
			attr(svg, "viewBox", svg_viewBox_value = `0 0 ${/*size*/ ctx[0]} ${/*size*/ ctx[0]}`);
			attr(svg, "preserveAspectRatio", "none");
			set_attributes(span, span_data);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, svg);
			append(svg, rect);
			if (if_block) if_block.m(svg, null);
			append(span, t);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*size*/ 1) {
				attr(rect, "width", /*size*/ ctx[0]);
			}

			if (!current || dirty & /*size*/ 1) {
				attr(rect, "height", /*size*/ ctx[0]);
			}

			if (!current || dirty & /*color*/ 2 && rect_style_value !== (rect_style_value = /*color*/ ctx[1] ? `fill: ${/*color*/ ctx[1]}` : "")) {
				attr(rect, "style", rect_style_value);
			}

			if (!current || dirty & /*borderRadius*/ 16) {
				attr(rect, "rx", /*borderRadius*/ ctx[4]);
			}

			if (/*showIcon*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(svg, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (!current || dirty & /*size*/ 1) {
				attr(svg, "width", /*size*/ ctx[0]);
			}

			if (!current || dirty & /*size*/ 1) {
				attr(svg, "height", /*size*/ ctx[0]);
			}

			if (!current || dirty & /*size*/ 1 && svg_viewBox_value !== (svg_viewBox_value = `0 0 ${/*size*/ ctx[0]} ${/*size*/ ctx[0]}`)) {
				attr(svg, "viewBox", svg_viewBox_value);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			set_attributes(span, span_data = get_spread_update(span_levels, [
				dirty & /*rest*/ 32 && /*rest*/ ctx[5],
				(!current || dirty & /*skeletonClassName*/ 64) && { class: /*skeletonClassName*/ ctx[6] }
			]));
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { size = 48 } = $$props;
	let { color = undefined } = $$props;
	let { iconColor = undefined } = $$props;
	let { showIcon = true } = $$props;
	let { borderRadius = "50%" } = $$props;
	let { effect = undefined } = $$props;
	let { class: className = undefined } = $$props;
	let rest = {};

	function multiplyPoints(pointsString) {
		return multiplySvgPoints(pointsString, 56, size, size);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("size" in $$new_props) $$invalidate(0, size = $$new_props.size);
		if ("color" in $$new_props) $$invalidate(1, color = $$new_props.color);
		if ("iconColor" in $$new_props) $$invalidate(2, iconColor = $$new_props.iconColor);
		if ("showIcon" in $$new_props) $$invalidate(3, showIcon = $$new_props.showIcon);
		if ("borderRadius" in $$new_props) $$invalidate(4, borderRadius = $$new_props.borderRadius);
		if ("effect" in $$new_props) $$invalidate(8, effect = $$new_props.effect);
		if ("class" in $$new_props) $$invalidate(9, className = $$new_props.class);
		if ("$$scope" in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
	};

	let skeletonClassName;

	$$self.$$.update = () => {
		$: Object.keys($$props).forEach(prop => {
			if (prop !== "size" && prop !== "color" && prop !== "iconColor" && prop !== "showIcon" && prop !== "effect" && prop !== "borderRadius" && prop !== "class") {
				$$invalidate(5, rest[prop] = $$props[prop], rest);
			}
		});

		if ($$self.$$.dirty & /*effect, className*/ 768) {
			$: $$invalidate(6, skeletonClassName = ["skeleton-avatar", effect && `skeleton-effect-${effect}`, className].filter(c => !!c).join(" "));
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		size,
		color,
		iconColor,
		showIcon,
		borderRadius,
		rest,
		skeletonClassName,
		multiplyPoints,
		effect,
		className,
		$$scope,
		slots
	];
}

class SkeletonAvatar extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			size: 0,
			color: 1,
			iconColor: 2,
			showIcon: 3,
			borderRadius: 4,
			effect: 8,
			class: 9
		});
	}
}

export default SkeletonAvatar;